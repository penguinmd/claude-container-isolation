#!/usr/bin/env bash
set -euo pipefail

# Container management script for Claude Code isolation
# Uses Apple Container CLI (macOS 26+)
# Commands: start, shell, stop, status, destroy

# Configuration - these will be set by the skill when generating the script
CONTAINER_NAME="${CONTAINER_NAME:-claude-dev}"
IMAGE_NAME="${IMAGE_NAME:-claude-dev:latest}"
PROJECT_ROOT="${PROJECT_ROOT:-$(pwd)}"

# Colors for output
readonly RED='\033[0;31m'
readonly GREEN='\033[0;32m'
readonly YELLOW='\033[1;33m'
readonly NC='\033[0m' # No Color

log_info() {
    echo -e "${GREEN}✓${NC} $1"
}

log_warn() {
    echo -e "${YELLOW}⚠${NC} $1"
}

log_error() {
    echo -e "${RED}✗${NC} $1" >&2
}

# Check if Apple Container CLI is installed
check_container_cli() {
    if ! command -v container &> /dev/null; then
        log_error "Apple Container CLI not found"
        echo ""
        echo "Install Apple Container:"
        echo "  brew install --cask container"
        echo ""
        echo "Or download from:"
        echo "  https://github.com/apple/container/releases"
        exit 1
    fi

    # Check if system service is running
    if ! container system status &> /dev/null; then
        log_warn "Container system service not running"
        log_info "Starting container system service..."
        container system start || {
            log_error "Failed to start container system service"
            exit 1
        }
    fi
}

# Build image if it doesn't exist
build_image_if_needed() {
    # Note: 'container image ls' lists images
    if ! container image ls 2>/dev/null | grep -q "$IMAGE_NAME"; then
        log_info "Image not found, building from Containerfile..."

        local containerfile="${PROJECT_ROOT}/.claude-container/Containerfile"
        if [[ ! -f "$containerfile" ]]; then
            log_error "Containerfile not found at: $containerfile"
            exit 1
        fi

        container build -t "$IMAGE_NAME" -f "$containerfile" "$PROJECT_ROOT" || {
            log_error "Failed to build image"
            exit 1
        }
        log_info "Image built successfully"
    fi
}

cmd_start() {
    check_container_cli

    # Check if container already exists and is running
    if container ps | grep -q "$CONTAINER_NAME"; then
        log_warn "Container '$CONTAINER_NAME' is already running"
        return 0
    fi

    # Check if container exists but is stopped
    if container ps -a | grep -q "$CONTAINER_NAME"; then
        log_info "Starting existing container..."
        container start "$CONTAINER_NAME" || {
            log_error "Failed to start container"
            exit 1
        }
        log_info "Container started"
        return 0
    fi

    # Build image if needed
    build_image_if_needed

    # Create and start new container
    log_info "Creating new container..."

    # Read configuration for volume mounts
    local config_file="${PROJECT_ROOT}/.claude-container/config.json"

    if [[ -f "$config_file" ]]; then
        # Parse config for storage type
        local storage_type=$(jq -r '.storage.type // "bind"' "$config_file" 2>/dev/null || echo "bind")

        if [[ "$storage_type" == "bind" ]]; then
            # Bind mount
            container run -d \
                --name "$CONTAINER_NAME" \
                -v "${PROJECT_ROOT}:/workspace" \
                -w /workspace \
                "$IMAGE_NAME" || {
                log_error "Failed to create container"
                exit 1
            }
        else
            # Named volume
            local volume_name=$(jq -r '.storage.source // "claude-data"' "$config_file" 2>/dev/null || echo "claude-data")
            container run -d \
                --name "$CONTAINER_NAME" \
                -v "${volume_name}:/workspace" \
                -w /workspace \
                "$IMAGE_NAME" || {
                log_error "Failed to create container"
                exit 1
            }
        fi
    else
        # Default: bind mount current directory
        container run -d \
            --name "$CONTAINER_NAME" \
            -v "${PROJECT_ROOT}:/workspace" \
            -w /workspace \
            "$IMAGE_NAME" || {
            log_error "Failed to create container"
            exit 1
        }
    fi

    log_info "Container created and started"

    # Run initial setup if scripts exist
    if [[ -f "${PROJECT_ROOT}/.claude-container/scripts/sync-skills.sh" ]]; then
        log_info "Syncing Claude skills..."
        container exec "$CONTAINER_NAME" /workspace/.claude-container/scripts/sync-skills.sh 2>/dev/null || true
    fi

    echo ""
    log_info "Container '$CONTAINER_NAME' is ready!"
    echo ""
    echo "Next steps:"
    echo "  • Enter container: $0 shell"
    echo "  • Run Claude Code: $0 shell, then run 'claude'"
    echo "  • Stop container: $0 stop"
}

cmd_shell() {
    check_container_cli

    if ! container ps | grep -q "$CONTAINER_NAME"; then
        log_error "Container '$CONTAINER_NAME' is not running"
        echo ""
        echo "Start the container first:"
        echo "  $0 start"
        exit 1
    fi

    log_info "Entering container shell..."
    container exec -it "$CONTAINER_NAME" /bin/bash
}

cmd_stop() {
    check_container_cli

    if ! container ps | grep -q "$CONTAINER_NAME"; then
        log_warn "Container '$CONTAINER_NAME' is not running"
        return 0
    fi

    log_info "Stopping container..."
    container stop "$CONTAINER_NAME" || {
        log_error "Failed to stop container"
        exit 1
    }
    log_info "Container stopped"
}

cmd_status() {
    check_container_cli

    echo "Container: $CONTAINER_NAME"
    echo "Image: $IMAGE_NAME"
    echo ""

    if container ps -a | grep -q "$CONTAINER_NAME"; then
        if container ps | grep -q "$CONTAINER_NAME"; then
            echo -e "Status: ${GREEN}●${NC} Running"
        else
            echo -e "Status: ${YELLOW}●${NC} Stopped"
        fi
        echo ""
        container ps -a | grep "$CONTAINER_NAME" || true
    else
        echo -e "Status: ${RED}●${NC} Not created"
    fi

    echo ""
    if container image ls 2>/dev/null | grep -q "$IMAGE_NAME"; then
        echo -e "Image: ${GREEN}Built${NC}"
        container image ls 2>/dev/null | grep "$IMAGE_NAME" || true
    else
        echo -e "Image: ${YELLOW}Not built${NC}"
    fi
}

cmd_destroy() {
    check_container_cli

    echo -e "${YELLOW}⚠  WARNING${NC}"
    echo "This will permanently delete the container: $CONTAINER_NAME"
    echo ""
    read -p "Are you sure? Type 'yes' to confirm: " confirm

    if [[ "$confirm" != "yes" ]]; then
        log_info "Cancelled"
        return 0
    fi

    # Stop if running
    if container ps | grep -q "$CONTAINER_NAME"; then
        log_info "Stopping container..."
        container stop "$CONTAINER_NAME" 2>/dev/null || true
    fi

    # Remove container
    if container ps -a | grep -q "$CONTAINER_NAME"; then
        log_info "Removing container..."
        container rm "$CONTAINER_NAME" || {
            log_error "Failed to remove container"
            exit 1
        }
        log_info "Container removed"
    else
        log_warn "Container does not exist"
    fi

    # Ask about volume
    local config_file="${PROJECT_ROOT}/.claude-container/config.json"
    if [[ -f "$config_file" ]]; then
        local storage_type=$(jq -r '.storage.type // "bind"' "$config_file" 2>/dev/null || echo "bind")

        if [[ "$storage_type" == "volume" ]]; then
            local volume_name=$(jq -r '.storage.source // ""' "$config_file" 2>/dev/null)
            if [[ -n "$volume_name" ]]; then
                echo ""
                read -p "Also delete volume '$volume_name'? (y/N): " remove_vol
                if [[ "$remove_vol" == "y" ]]; then
                    container volume rm "$volume_name" 2>/dev/null || true
                    log_info "Volume removed"
                fi
            fi
        fi
    fi
}

cmd_help() {
    cat << 'EOF'
Container Management Script - Apple Container

Usage: container <command>

Commands:
  start      Start the container (creates if needed)
  shell      Enter container shell (interactive bash)
  stop       Stop the container (preserves data)
  status     Show container and image status
  destroy    Permanently delete container
  help       Show this help message

Examples:
  container start      # Build image and start container
  container shell      # Enter interactive shell
  container status     # Check if running
  container stop       # Stop container
  container destroy    # Remove completely

Requirements:
  • macOS 26+
  • Apple Silicon (M1/M2/M3/M4)
  • Apple Container CLI (brew install --cask container)

Documentation:
  • README.md - Full documentation
  • CONTAINER-SPEC.md - Container specifications
  • GitHub: https://github.com/penguinmd/claude-container-isolation

EOF
}

# Main command dispatcher
main() {
    if [[ $# -eq 0 ]]; then
        cmd_help
        exit 1
    fi

    case "${1:-}" in
        start)   cmd_start ;;
        shell)   cmd_shell ;;
        stop)    cmd_stop ;;
        status)  cmd_status ;;
        destroy) cmd_destroy ;;
        help|--help|-h) cmd_help ;;
        *)
            log_error "Unknown command: $1"
            echo ""
            cmd_help
            exit 1
            ;;
    esac
}

main "$@"

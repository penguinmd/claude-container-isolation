#!/usr/bin/env bash
set -euo pipefail

# Container management script for skills development environment
# Commands: start, shell, stop, status, destroy

CONTAINER_NAME="skills-dev"
IMAGE_NAME="skills-dev:latest"
DOCKERFILE_PATH="/Users/mdr/SynologyDrive/projects/skills/container-isolation/Dockerfile"
PROJECT_ROOT="/Users/mdr/SynologyDrive/projects/skills"
SCRIPTS_DIR="/Users/mdr/SynologyDrive/projects/skills/container-isolation/scripts"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

log_info() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

log_warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

check_docker() {
    if ! command -v docker &> /dev/null; then
        log_error "Docker is not installed or not in PATH"
        exit 1
    fi

    if ! docker info &> /dev/null; then
        log_error "Docker daemon is not running"
        exit 1
    fi
}

build_image() {
    log_info "Building Docker image..."
    if ! docker build -t "$IMAGE_NAME" -f "$DOCKERFILE_PATH" "$PROJECT_ROOT"; then
        log_error "Failed to build Docker image"
        exit 1
    fi
    log_info "Docker image built successfully"
}

start_container() {
    check_docker

    # Check if container already exists
    if docker ps -a --format '{{.Names}}' | grep -q "^${CONTAINER_NAME}$"; then
        if docker ps --format '{{.Names}}' | grep -q "^${CONTAINER_NAME}$"; then
            log_warn "Container '$CONTAINER_NAME' is already running"
            return 0
        else
            log_info "Starting existing container '$CONTAINER_NAME'..."
            docker start "$CONTAINER_NAME"
            log_info "Container started successfully"
            return 0
        fi
    fi

    # Check if image exists
    if ! docker images --format '{{.Repository}}:{{.Tag}}' | grep -q "^${IMAGE_NAME}$"; then
        log_warn "Image '$IMAGE_NAME' not found, building..."
        build_image
    fi

    log_info "Creating and starting new container '$CONTAINER_NAME'..."

    # Run container with volume mounts
    docker run -d \
        --name "$CONTAINER_NAME" \
        --hostname skills-dev \
        -v "${PROJECT_ROOT}:/workspace" \
        -v "${HOME}/.claude:/root/.claude:ro" \
        -w /workspace \
        "$IMAGE_NAME"

    log_info "Container '$CONTAINER_NAME' started successfully"

    # Run initial setup
    log_info "Running initial MCP setup..."
    docker exec "$CONTAINER_NAME" /workspace/container-isolation/scripts/setup-mcp.sh

    log_info "Syncing skills..."
    docker exec "$CONTAINER_NAME" /workspace/container-isolation/scripts/sync-skills.sh

    log_info "Setup complete! Use 'container shell' to access the container"
}

shell_container() {
    check_docker

    if ! docker ps --format '{{.Names}}' | grep -q "^${CONTAINER_NAME}$"; then
        log_error "Container '$CONTAINER_NAME' is not running"
        log_info "Use 'container start' to start the container"
        exit 1
    fi

    log_info "Opening shell in container '$CONTAINER_NAME'..."
    docker exec -it "$CONTAINER_NAME" /bin/bash
}

stop_container() {
    check_docker

    if ! docker ps --format '{{.Names}}' | grep -q "^${CONTAINER_NAME}$"; then
        log_warn "Container '$CONTAINER_NAME' is not running"
        return 0
    fi

    log_info "Stopping container '$CONTAINER_NAME'..."
    docker stop "$CONTAINER_NAME"
    log_info "Container stopped successfully"
}

status_container() {
    check_docker

    echo "Container: $CONTAINER_NAME"
    echo "Image: $IMAGE_NAME"
    echo ""

    if docker ps -a --format '{{.Names}}' | grep -q "^${CONTAINER_NAME}$"; then
        if docker ps --format '{{.Names}}' | grep -q "^${CONTAINER_NAME}$"; then
            echo -e "Status: ${GREEN}Running${NC}"
            echo ""
            docker ps --filter "name=^${CONTAINER_NAME}$" --format "table {{.ID}}\t{{.Image}}\t{{.Status}}\t{{.Ports}}"
        else
            echo -e "Status: ${YELLOW}Stopped${NC}"
            echo ""
            docker ps -a --filter "name=^${CONTAINER_NAME}$" --format "table {{.ID}}\t{{.Image}}\t{{.Status}}"
        fi
    else
        echo -e "Status: ${RED}Not created${NC}"
    fi

    echo ""
    if docker images --format '{{.Repository}}:{{.Tag}}' | grep -q "^${IMAGE_NAME}$"; then
        echo -e "Image: ${GREEN}Built${NC}"
        docker images --filter "reference=${IMAGE_NAME}" --format "table {{.Repository}}\t{{.Tag}}\t{{.Size}}\t{{.CreatedAt}}"
    else
        echo -e "Image: ${YELLOW}Not built${NC}"
    fi
}

destroy_container() {
    check_docker

    if docker ps --format '{{.Names}}' | grep -q "^${CONTAINER_NAME}$"; then
        log_info "Stopping container '$CONTAINER_NAME'..."
        docker stop "$CONTAINER_NAME"
    fi

    if docker ps -a --format '{{.Names}}' | grep -q "^${CONTAINER_NAME}$"; then
        log_info "Removing container '$CONTAINER_NAME'..."
        docker rm "$CONTAINER_NAME"
        log_info "Container removed successfully"
    else
        log_warn "Container '$CONTAINER_NAME' does not exist"
    fi
}

show_usage() {
    cat << EOF
Usage: container <command>

Container management for skills development environment

Commands:
    start       Build (if needed) and start the container
    shell       Open an interactive shell in the running container
    stop        Stop the running container
    status      Show container and image status
    destroy     Stop and remove the container (keeps image)

Examples:
    container start     # Start the development container
    container shell     # Access the container shell
    container status    # Check if container is running
    container stop      # Stop the container
    container destroy   # Remove the container completely

EOF
}

# Main command handling
main() {
    if [ $# -eq 0 ]; then
        show_usage
        exit 1
    fi

    case "$1" in
        start)
            start_container
            ;;
        shell)
            shell_container
            ;;
        stop)
            stop_container
            ;;
        status)
            status_container
            ;;
        destroy)
            destroy_container
            ;;
        help|--help|-h)
            show_usage
            ;;
        *)
            log_error "Unknown command: $1"
            echo ""
            show_usage
            exit 1
            ;;
    esac
}

main "$@"
